package com.k2.schemas.worklist.d1;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.11.fuse-000281-redhat-3
 * 2019-09-04T23:18:50.609+08:00
 * Generated source version: 3.1.11.fuse-000281-redhat-3
 * 
 */
@WebServiceClient(name = "WS", 
                  wsdlLocation = "file:/Users/radarlui/Documents/Accounts/KGI/kgi.wsdl",
                  targetNamespace = "http://schemas.k2.com/worklist/d1") 
public class WS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://schemas.k2.com/worklist/d1", "WS");
    public final static QName WSSoap = new QName("http://schemas.k2.com/worklist/d1", "WSSoap");
    public final static QName WSSoap12 = new QName("http://schemas.k2.com/worklist/d1", "WSSoap12");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/radarlui/Documents/Accounts/KGI/kgi.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/Users/radarlui/Documents/Accounts/KGI/kgi.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WS() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public WS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns WSSoap
     */
    @WebEndpoint(name = "WSSoap")
    public WSSoap getWSSoap() {
        return super.getPort(WSSoap, WSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSSoap
     */
    @WebEndpoint(name = "WSSoap")
    public WSSoap getWSSoap(WebServiceFeature... features) {
        return super.getPort(WSSoap, WSSoap.class, features);
    }


    /**
     *
     * @return
     *     returns WSSoap
     */
    @WebEndpoint(name = "WSSoap12")
    public WSSoap getWSSoap12() {
        return super.getPort(WSSoap12, WSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSSoap
     */
    @WebEndpoint(name = "WSSoap12")
    public WSSoap getWSSoap12(WebServiceFeature... features) {
        return super.getPort(WSSoap12, WSSoap.class, features);
    }

}
